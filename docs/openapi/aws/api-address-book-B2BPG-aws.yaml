openapi: 3.0.1
info:
  title: >-
    ${stageVariables.ProjectName}-${stageVariables.MicroServiceUniqueName}-${stageVariables.IntendedUsage}
  version: Tq6Wg/ZAIWjPKiVTpTAbVcs+KsEHpAe58TNzrySSQPo=
servers:
  - url: https://${stageVariables.DnsName}/{basePath}
    variables:
      basePath:
        default: /${stageVariables.ServiceApiPath}
    x-amazon-apigateway-endpoint-configuration:
      disableExecuteApiEndpoint: true
paths:
  /v1/digital-address:
    get:
      summary: Get all digital addressed
      description: Returns all digital address for the recipient
      operationId: getAddressesByRecipient
      tags:
        - all
      x-api-permissions:
        - BASE
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddresses'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    options:
      operationId: Options for /v1/digital-address API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters: {}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /v1/digital-address/legal/{senderId}:
    get:
      summary: get the legal digital addresses of the recipient to the sender
      description: >-
        Returns a legal digital address for the recipient to the sender
        specified
      operationId: getLegalAddressBySenderB2B
      tags:
        - legalB2B
      x-api-permissions:
        - BASE
      parameters:
        - $ref: '#/components/parameters/senderId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LegalDigitalAddress'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/legal/{senderId}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
          integration.request.path.senderId: method.request.path.senderId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
    options:
      operationId: Options for /v1/digital-address/legal/{senderId} API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/legal/{senderId}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.path.senderId: method.request.path.senderId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /v1/digital-address/courtesy/{senderId}:
    get:
      summary: get the courtesy digital addresses of the recipient to the sender
      description: >-
        Returns a courtesy digital address for the recipient to the sender
        specified
      operationId: getCourtesyAddressBySenderB2B
      tags:
        - courtesyB2B
      x-api-permissions:
        - BASE
      parameters:
        - $ref: '#/components/parameters/senderId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourtesyDigitalAddress'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/courtesy/{senderId}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
          integration.request.path.senderId: method.request.path.senderId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
    options:
      operationId: Options for /v1/digital-address/courtesy/{senderId} API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/courtesy/{senderId}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.path.senderId: method.request.path.senderId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /v1/digital-address/legal:
    get:
      summary: get digital addresses with legal value
      operationId: getLegalAddressByRecipient
      tags:
        - legal
      x-api-permissions:
        - BASE
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LegalAndUnverifiedDigitalAddress'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/legal
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    options:
      operationId: Options for /v1/digital-address/legal API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/legal
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters: {}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /v1/digital-address/courtesy:
    get:
      summary: get digital addresses without legal value
      operationId: getCourtesyAddressByRecipient
      tags:
        - courtesy
      x-api-permissions:
        - BASE
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourtesyDigitalAddress'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/courtesy
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    options:
      operationId: Options for /v1/digital-address/courtesy API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/courtesy
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters: {}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /v1/digital-address/legal/{senderId}/{channelType}:
    parameters:
      - $ref: '#/components/parameters/senderId'
      - in: path
        name: channelType
        description: Communication Channel type
        required: true
        schema:
          $ref: '#/components/schemas/LegalChannelType'
    post:
      summary: Create or update a digital address with legal value
      operationId: postRecipientLegalAddress
      tags:
        - legal
      x-api-permissions:
        - BASE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressVerification'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressVerificationResponse'
          description: |
            Nell'oggetto c'è la motivazione di quanto richiesto per procedere
        '204':
          description: successful operation
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '422':
          description: >
            This error is caused by one of this events: * Verification code
            failure: error.detail equals to
            PN_USERATTRIBUTES_INVALIDVERIFICATIONCODE * Verification code max
            attempt reached: error.detail equals to
            PN_USERATTRIBUTES_RETRYLIMITVERIFICATIONCODE * Verification code
            expired/notfound: error.detail equals to
            PN_USERATTRIBUTES_EXPIREDVERIFICATIONCODE
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/legal/{senderId}/{channelType}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
          integration.request.path.senderId: method.request.path.senderId
          integration.request.path.channelType: method.request.path.channelType
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    delete:
      summary: Delete Digital Address
      description: Delete a single Digital Address with legal value
      operationId: deleteRecipientLegalAddress
      tags:
        - legal
      x-api-permissions:
        - BASE
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Digital Address not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/legal/{senderId}/{channelType}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
          integration.request.path.senderId: method.request.path.senderId
          integration.request.path.channelType: method.request.path.channelType
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    options:
      operationId: Options for /v1/digital-address/legal/{senderId}/{channelType} API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/legal/{senderId}/{channelType}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.path.senderId: method.request.path.senderId
          integration.request.path.channelType: method.request.path.channelType
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /v1/digital-address/courtesy/{senderId}/{channelType}:
    parameters:
      - $ref: '#/components/parameters/senderId'
      - in: path
        name: channelType
        description: Communication Channel type
        required: true
        schema:
          $ref: '#/components/schemas/CourtesyChannelType'
    post:
      summary: Create or update a digital address without legal value
      operationId: postRecipientCourtesyAddress
      tags:
        - courtesy
      x-api-permissions:
        - BASE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressVerification'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressVerificationResponse'
          description: >
            Nell'oggetto c'è la motivazione di quanto richiesto per procedere
            (se il codice di verifica o se la validazione della pec)
        '204':
          description: successful operation
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '422':
          description: >
            This error is caused by one of this events: * Verification code
            failure: error.detail equals to
            PN_USERATTRIBUTES_INVALIDVERIFICATIONCODE * Verification code max
            attempt reached: error.detail equals to
            PN_USERATTRIBUTES_RETRYLIMITVERIFICATIONCODE * Verification code
            expired/notfound: error.detail equals to
            PN_USERATTRIBUTES_EXPIREDVERIFICATIONCODE
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/courtesy/{senderId}/{channelType}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
          integration.request.path.senderId: method.request.path.senderId
          integration.request.path.channelType: method.request.path.channelType
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    delete:
      summary: Delete Digital Address
      description: Delete a single Digital Address without legal value
      operationId: deleteRecipientCourtesyAddress
      tags:
        - courtesy
      x-api-permissions:
        - BASE
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Digital Address not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - pn-auth-fleet_b2bAuthorizer_openapi: []
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/courtesy/{senderId}/{channelType}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.header.x-pagopa-pn-src-ch-details: context.authorizer.sourceChannelDetails
          integration.request.header.x-pagopa-pn-src-ch: context.authorizer.sourceChannel
          integration.request.path.senderId: method.request.path.senderId
          integration.request.path.channelType: method.request.path.channelType
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    options:
      operationId: >-
        Options for /v1/digital-address/courtesy/{senderId}/{channelType} API
        CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/v1/digital-address/courtesy/{senderId}/{channelType}
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.path.senderId: method.request.path.senderId
          integration.request.path.channelType: method.request.path.channelType
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
components:
  parameters:
    senderId:
      in: path
      name: senderId
      description: sender Id or 'default' for general addresses not associated to a sender
      example: default
      required: true
      schema:
        type: string
        maxLength: 50
        pattern: ^[ -~ ]*$
  schemas:
    BaseDigitalAddress:
      type: object
      required:
        - addressType
        - recipientId
        - channelType
      properties:
        addressType:
          type: string
        recipientId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        senderId:
          type: string
          description: senderId or 'default'
          example: cmbo
        senderName:
          type: string
          description: name of the sender
          example: abc
        channelType:
          type: string
    LegalAddressType:
      type: string
      description: Valore addresstype per legal
      enum:
        - LEGAL
    LegalChannelType:
      type: string
      description: Communication Channel types __with__ legal value
      enum:
        - PEC
        - APPIO
    LegalAndUnverifiedDigitalAddress:
      allOf:
        - $ref: '#/components/schemas/BaseDigitalAddress'
        - type: object
          required:
            - addressType
            - channelType
          properties:
            addressType:
              $ref: '#/components/schemas/LegalAddressType'
            value:
              type: string
              x-field-extra-annotation: '@lombok.ToString.Exclude'
              example: nome.utente@server.it
            channelType:
              $ref: '#/components/schemas/LegalChannelType'
            requestId:
              type: string
            codeValid:
              type: boolean
            pecValid:
              type: boolean
    CourtesyAddressType:
      type: string
      description: Valore addresstype per courtesy
      enum:
        - COURTESY
    CourtesyChannelType:
      type: string
      description: Communication Channel types __without__ legal value
      enum:
        - EMAIL
        - SMS
        - APPIO
    CourtesyDigitalAddress:
      allOf:
        - $ref: '#/components/schemas/BaseDigitalAddress'
        - type: object
          required:
            - addressType
            - channelType
            - value
          properties:
            addressType:
              $ref: '#/components/schemas/CourtesyAddressType'
            value:
              type: string
              x-field-extra-annotation: '@lombok.ToString.Exclude'
              example: nome.utente@server.it
            channelType:
              $ref: '#/components/schemas/CourtesyChannelType'
    UserAddresses:
      type: object
      properties:
        legal:
          type: array
          items:
            $ref: '#/components/schemas/LegalAndUnverifiedDigitalAddress'
        courtesy:
          type: array
          items:
            $ref: '#/components/schemas/CourtesyDigitalAddress'
    ProblemError:
      properties:
        code:
          description: Internal code of the error, in human-readable format
          example: >-
            PN_PARAMETER_TOO_LONG | PN_PARAMETER_TOO_SHORT | PN_DUPLICATE_ENTRY
            | etc...
          type: string
        element:
          description: Parameter or request body field name for validation error
          example: body.order.item[2].quantity
          type: string
        detail:
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Parameter not valid
          maxLength: 1024
          type: string
      required:
        - code
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: >-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          type: number
          example: 503
          maximum: 600
          minimum: 100
          exclusiveMaximum: true
        title:
          description: >-
            A short, summary of the problem type. Written in english and
            readable
          example: Service Unavailable
          maxLength: 64
          pattern: ^[ -~]{0,64}$
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: ^.{0,4096}$
          type: string
        traceId:
          description: Internal support identifier associated to error
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        timestamp:
          description: date and time referred to UTC
          example: '2022-07-27T12:22:33.444Z'
          type: string
          format: date-time
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      required:
        - status
        - errors
    LegalDigitalAddress:
      allOf:
        - $ref: '#/components/schemas/BaseDigitalAddress'
        - type: object
          required:
            - addressType
            - channelType
            - value
          properties:
            addressType:
              $ref: '#/components/schemas/LegalAddressType'
            value:
              type: string
              x-field-extra-annotation: '@lombok.ToString.Exclude'
              example: nome.utente@server.it
            channelType:
              $ref: '#/components/schemas/LegalChannelType'
    VerificationCode:
      type: string
      description: Verification Code
      minLength: 5
      maxLength: 5
      pattern: ^\d{5}$
      example: '12345'
    AddressVerification:
      type: object
      description: richiede value oppure requestId di un indirizzo in corso di validazione
      properties:
        value:
          type: string
          x-field-extra-annotation: '@lombok.ToString.Exclude'
          maxLength: 254
          pattern: >-
            ^(((00|\+)393\d{8,9})|(?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\[(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])|(ENABLED)|(DISABLED)|(APPIO))$
        requestId:
          type: string
          maxLength: 64
          pattern: ^[ -~ ]*$
        verificationCode:
          $ref: '#/components/schemas/VerificationCode'
    AddressVerificationResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: string
          description: >
            Uno dei seguenti valori - CODE_VERIFICATION_REQUIRED: indica che è
            richiesto il codice di verifica - PEC_VALIDATION_REQUIRED: indica
            che il codice di verifica inserito è valido, ma che non è ancora
            arrivata la conferma PEC (solo per la PEC)
          enum:
            - CODE_VERIFICATION_REQUIRED
            - PEC_VALIDATION_REQUIRED
  responses: {}
  securitySchemes:
    pn-auth-fleet_b2bAuthorizer_openapi:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        authorizerUri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:pn-b2bAuthorizerLambda/invocations
        authorizerResultTtlInSeconds: 60
        identitySource: method.request.header.Authorization
        type: request
tags:
  - name: all
    description: Receiver Digital Address and Digital Domicile
  - name: legal
    description: Receiver Digital Domicile
  - name: courtesy
    description: Receiver Digital Addresses
  - name: legalB2B
    description: Receiver Digital Domicile
  - name: courtesyB2B
    description: Receiver Digital Addresses
x-amazon-apigateway-gateway-responses:
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
  BAD_REQUEST_PARAMETERS:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: >-
        {"status": 400, "title": "VALIDATION ERROR", "traceId":
        "$context.xrayTraceId", "errors": [ { "code": "PN_INVALID_PARAMETERS",
        "detail": "Validation errors: $context.error.validationErrorString" } ]}
  BAD_REQUEST_BODY:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: >-
        {"status": 400, "title": "VALIDATION ERROR", "traceId":
        "$context.xrayTraceId", "errors": [ { "code": "PN_INVALID_BODY",
        "detail": "Validation errors: $context.error.validationErrorString" } ]}
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
x-amazon-apigateway-request-validator: basic
